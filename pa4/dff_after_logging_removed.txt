diff --git a/pa4/SimpleDynamo/app/src/main/java/edu/buffalo/cse/cse486586/simpledynamo/SimpleDynamoProvider.java b/pa4/SimpleDynamo/app/src/main/java/edu/buffalo/cse/cse486586/simpledynamo/SimpleDynamoProvider.java
index 1814a31..380960e 100644
--- a/pa4/SimpleDynamo/app/src/main/java/edu/buffalo/cse/cse486586/simpledynamo/SimpleDynamoProvider.java
+++ b/pa4/SimpleDynamo/app/src/main/java/edu/buffalo/cse/cse486586/simpledynamo/SimpleDynamoProvider.java
@@ -40,6 +40,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 	String myPort = null;
 	String portStr = null;
 	boolean INSERTION = false;
+	boolean logging = false;
 	String myPortHash = null;
 	String successor = null;
 	String predecessor = null;
@@ -59,7 +60,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 	public int delete(Uri uri, String selection, String[] selectionArgs) {
 		// TODO Auto-generated method stub
 
-		Log.d(TAG, "delete key: " + selection);
+		if (logging == true)Log.d(TAG, "delete key: " + selection);
 		String hashedKey = null;
 		try {
 			hashedKey = genHash(selection);
@@ -74,7 +75,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 		ContentValues newValues = new ContentValues();
 		newValues.put("type", "deleted");
 		db.update(TABLE_NAME, newValues, selection, selectionArgss);
-		Log.d(TAG, "key deleted locally: " + selectionArgss[0]);
+		if (logging == true)Log.d(TAG, "key deleted locally: " + selectionArgss[0]);
 
 		String portToStoreKey = getNodeToStoreKey(hashedKey);
 		if (myPort.equals(portToStoreKey)) {
@@ -83,7 +84,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 			for (int i = 0; i < 2; i++) {
 				port = successorMap.get(port);
 
-				Log.d(TAG, "calling succ: " + port + " to delete from:" + myPort);
+				if (logging == true)Log.d(TAG, "calling succ: " + port + " to delete from:" + myPort);
 				new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, "delete", port, selectionArgss[0]);
 			}
 		}
@@ -101,7 +102,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 	public Uri insert(Uri uri, ContentValues values) {
 		// TODO Auto-generated method stub
 		String originalKey = (String) values.get("key");
-		INSERTION = true;
+		// INSERTION = true;
 		String hashedKey = null;
 		try {
 			hashedKey = genHash(originalKey);
@@ -114,9 +115,9 @@ public class SimpleDynamoProvider extends ContentProvider {
 		String succ2 = successorMap.get(succ1);
 //		String time = Long.toString(System.currentTimeMillis());
 
-		 Log.d(TAG, "INSERTION " + myPort + " key: " + originalKey + " value:" +(String) values.get("value"));
+		 if (logging == true)Log.d(TAG, "INSERTION " + myPort + " key: " + originalKey + " value:" +(String) values.get("value"));
 		if (myPort.equals(portToStoreKey)) {
-			// Log.d(TAG, "INSERTION myPort.equals(portToStoreKey) " + myPort + " " + originalKey);
+			// if (logging == true)Log.d(TAG, "INSERTION myPort.equals(portToStoreKey) " + myPort + " " + originalKey);
 			ContentValues newValues = new ContentValues();
 
 //			newValues.put(SimpleDynamoProvider.COLUMN_NAME_KEY, originalKey);
@@ -240,7 +241,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 						(String) values.get("value"), portToStoreKey, time);
 			}
 		} else {
-			// Log.d(TAG, "INSERTION myPort Not equals(portToStoreKey) " + myPort + " " + portToStoreKey + " " + originalKey);
+			// if (logging == true)Log.d(TAG, "INSERTION myPort Not equals(portToStoreKey) " + myPort + " " + portToStoreKey + " " + originalKey);
 //			new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, "insert", portToStoreKey, originalKey, (String) values.get("value"));
 			actSynchronously("insert", portToStoreKey, originalKey, (String) values.get("value"), Long.toString(System.currentTimeMillis()));
 		}
@@ -251,14 +252,14 @@ public class SimpleDynamoProvider extends ContentProvider {
 	}
 
 	public Uri insertReplication(Uri uri, String key, String value, String type, String port, String msgType, String time) {
-		 Log.d(TAG,
+		 if (logging == true)Log.d(TAG,
 				 "insertReplicationFunc: " + " key: "+ key + " value: "+ value + " type: "+ type + " port: "+ port + " myPort: " + myPort+" msgType: "+msgType);
 		 try {
-			 Log.d(TAG, "time:" + time);
+			 if (logging == true)Log.d(TAG, "time:" + time);
 		 } catch (Exception e) {
 		 	Log.e(TAG, "time exception: "+e.toString());
 		 }
-		INSERTION = true;
+		// INSERTION = true;
 		ContentValues newValues = new ContentValues();
 
 //		newValues.put(SimpleDynamoProvider.COLUMN_NAME_KEY, originalKey);
@@ -295,7 +296,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 				}
 			} else if (msgType.equals("replication")) {
 				if (time == null) {
-					Log.d(TAG, "time is null in replication");
+					if (logging == true)Log.d(TAG, "time is null in replication");
 					db.delete(TABLE_NAME, "key=?", new String[]{key});
 					newValues.put(SimpleDynamoProvider.COLUMN_NAME_KEY, key);
 					db.insertWithOnConflict(TABLE_NAME, null, newValues, SQLiteDatabase.CONFLICT_REPLACE);
@@ -322,7 +323,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 			db.delete(TABLE_NAME, "key=?", new String[]{key});
 			newValues.put(SimpleDynamoProvider.COLUMN_NAME_KEY, key);
 			db.insertWithOnConflict(TABLE_NAME, null, newValues, SQLiteDatabase.CONFLICT_REPLACE);
-			Log.d(TAG, "timetime insertReplication cursor is null: " + time);
+			if (logging == true)Log.d(TAG, "timetime insertReplication cursor is null: " + time);
 		}
 
 //		int updated = db.update(TABLE_NAME, newValues, COLUMN_NAME_KEY+"=?", new String[]{key});
@@ -398,7 +399,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 			portStr = tel.getLine1Number().substring(tel.getLine1Number().length() - 4);
 			myPort = String.valueOf((Integer.parseInt(portStr) * 2));
 
-			Log.d(TAG, "CP onCreate: " + myPort);
+			if (logging == true)Log.d(TAG, "CP onCreate: " + myPort);
 
 			myPortHash = portHashMap.get(myPort);
 
@@ -418,7 +419,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 				for (int i = 0; i < 2; i++) {
 					port = predecessorMap.get(port);
 
-					// Log.d(TAG, "calling pred: " + port + " to replicate from:" + " " + myPort);
+					// if (logging == true)Log.d(TAG, "calling pred: " + port + " to replicate from:" + " " + myPort);
 					new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, "replicate", port, myPort);
 //					actSynchronously("replicate", port, myPort, null);
 				}
@@ -426,7 +427,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 				port = myPort;
 				for (int i = 0; i < 2; i++) {
 					port = successorMap.get(port);
-					// Log.d(TAG, "calling succ: " + port + " to getMissedInsert from:" + myPort);
+					// if (logging == true)Log.d(TAG, "calling succ: " + port + " to getMissedInsert from:" + myPort);
 					new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, "getMissedInsert", port, myPort);
 //					actSynchronously("getMissedInsert", port, myPort, null);
 				}
@@ -447,7 +448,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 		Cursor dummyCursor = null;
 
 		while(INSERTION) {
-			Log.d(TAG, "score INSERTION BEING DONE FOR KEY: " + selection);
+			if (logging == true)Log.d(TAG, "score INSERTION BEING DONE FOR KEY: " + selection);
 		}
 
 		boolean ORIGIN = true;
@@ -456,7 +457,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 			ORIGIN = false;
 			originatorPort = selectionArgs[0];
 		}
-		Log.d(TAG, "qKEY selection:" + selection + " myPort: "+ myPort + " " + "originatorPort: " + originatorPort);
+		if (logging == true)Log.d(TAG, "qKEY selection:" + selection + " myPort: "+ myPort + " " + "originatorPort: " + originatorPort);
 
 
 //		if (myPort.equals(originatorPort)) {
@@ -465,8 +466,8 @@ public class SimpleDynamoProvider extends ContentProvider {
 
 		sortOrder = "time DESC";
 
-		Log.d(TAG, "replicate query insertion 1");
-		Log.d(TAG, "QUERY GLOBAL myPort: " + myPort + ", succ: "+ successor + ", pred: "+predecessor);
+		if (logging == true)Log.d(TAG, "replicate query insertion 1");
+		if (logging == true)Log.d(TAG, "QUERY GLOBAL myPort: " + myPort + ", succ: "+ successor + ", pred: "+predecessor);
 
 		if (selection.equals("@") || selection.equals("LDump")) {
 			String dupSelection;
@@ -488,7 +489,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 				sortOrder,
 				null
 			);
-			Log.d(TAG, "query: " + selection);
+			if (logging == true)Log.d(TAG, "query: " + selection);
 			dummyCursor = db.query(
 					TABLE_NAME,
 					null,
@@ -499,16 +500,16 @@ public class SimpleDynamoProvider extends ContentProvider {
 					sortOrder,
 					null
 			);
-			Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
-			Log.d(TAG, "qKEY " + selection);
+			if (logging == true)Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
+			if (logging == true)Log.d(TAG, "qKEY " + selection);
 		} else if (selection.equals("*") || selection.equals("GDump") || selection.equals("insertion") || selection.equals("replication")) {
-			Log.d(TAG, "in * query myPort: " + myPort);
+			if (logging == true)Log.d(TAG, "in * query myPort: " + myPort);
 
 			String dupSelection = selection;
 			String[] selectionArgss = null;
-			Log.d(TAG, "replicate query insertion 2");
+			if (logging == true)Log.d(TAG, "replicate query insertion 2");
 			if (selection.equals("insertion") || selection.equals("replication")) {
-				Log.d(TAG, "replicate query insertion 3");
+				if (logging == true)Log.d(TAG, "replicate query insertion 3");
 
 
 				if (selection.equals("insertion")) {
@@ -519,7 +520,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 					selection = "type=? AND port=?";
 				}
 
-				Log.d(TAG, "replicate query insertion 4");
+				if (logging == true)Log.d(TAG, "replicate query insertion 4");
 
 				try {
 					cursor = db.query(
@@ -543,11 +544,11 @@ public class SimpleDynamoProvider extends ContentProvider {
 							sortOrder,
 							null
 					);
-					Log.d(TAG, "replicate query insertion 5");
+					if (logging == true)Log.d(TAG, "replicate query insertion 5");
 				} catch (Exception e) {
 					Log.e(TAG,
 							"Query ERROR " + selection + " " + selectionArgss[0]);
-					// Log.d(TAG, "Query ERROR " + selection + " " + selectionArgss[0] + " " + selectionArgss[1]);
+					// if (logging == true)Log.d(TAG, "Query ERROR " + selection + " " + selectionArgss[0] + " " + selectionArgss[1]);
 				}
 			} else {
 				cursor = db.query(
@@ -573,10 +574,10 @@ public class SimpleDynamoProvider extends ContentProvider {
 			}
 
 			if (selection.equals("GDump") || dupSelection.equals("insertion") || dupSelection.equals("replication")) {
-				Log.d(TAG, "replicate query insertion 6");
-				Log.d(TAG, "query " + dupSelection);
+				if (logging == true)Log.d(TAG, "replicate query insertion 6");
+				if (logging == true)Log.d(TAG, "query " + dupSelection);
 				while(INSERTION) {
-					Log.d(TAG,
+					if (logging == true)Log.d(TAG,
 							"score 2 "+dupSelection+" BEING DONE FOR KEY: " + selection);
 				}
 //				if (dupSelection.equals("insertion") || dupSelection.equals(
@@ -603,13 +604,13 @@ public class SimpleDynamoProvider extends ContentProvider {
 						sortOrder,
 						null
 				);
-				Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
+				if (logging == true)Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
 //				cursor.moveToFirst();
 				return cursor;
 			}
 
 //			if (successor != null && !successor.equals(originatorPort)) {
-				Log.d(TAG, "successor != null && !successor.equals" +
+				if (logging == true)Log.d(TAG, "successor != null && !successor.equals" +
 						"(originatorPort) " + myPort + " to succ "+ successor + " originatorPort: "+originatorPort);
 				String succ = successor;
 				Cursor successorCursor = null;
@@ -627,9 +628,9 @@ public class SimpleDynamoProvider extends ContentProvider {
 					}
 				}
 //			}
-			Log.d(TAG, "query *");
+			if (logging == true)Log.d(TAG, "query *");
 			dummyCursor = cursor;
-			Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
+			if (logging == true)Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
 		} else {
 			String hashedKey = null;
 			try {
@@ -641,13 +642,13 @@ public class SimpleDynamoProvider extends ContentProvider {
 			String[] selectionArgss = new String[]{selection, "deleted"};
 			String portToStoreKey = getNodeToStoreKey(hashedKey);
 
-			Log.d(TAG, "QUERYING " + myPort + " " + selection);
-			Log.d(TAG, "QUERYING myPort.equals(portToStoreKey) " + myPort + " " + selection);
+			if (logging == true)Log.d(TAG, "QUERYING " + myPort + " " + selection);
+			if (logging == true)Log.d(TAG, "QUERYING myPort.equals(portToStoreKey) " + myPort + " " + selection);
 
 			selection = COLUMN_NAME_KEY + "=? AND type != ?";
 
 			while(INSERTION) {
-				Log.d(TAG,
+				if (logging == true)Log.d(TAG,
 						"score 3 "+selection+" BEING DONE FOR KEY: " + selectionArgss[0] + " type: " + selectionArgss[1]);
 			}
 
@@ -673,13 +674,13 @@ public class SimpleDynamoProvider extends ContentProvider {
 					"1"
 			);
 
-				Log.d(TAG, "qKEY " + selectionArgss[0]);
+				if (logging == true)Log.d(TAG, "qKEY " + selectionArgss[0]);
 			try {
 //				if (cursor.getCount() > 0 && myPort.equals(portToStoreKey)) {
 //				if (myPort.equals(portToStoreKey)) {
 //					while ((cursor != null && cursor.getCount() <= 0) || cursor == null) {
 				while(INSERTION) {
-					Log.d(TAG, "score 3 "+selection+" BEING DONE FOR KEY: " + selectionArgss[0] + " type: " + selectionArgss[1]);
+					if (logging == true)Log.d(TAG, "score 3 "+selection+" BEING DONE FOR KEY: " + selectionArgss[0] + " type: " + selectionArgss[1]);
 				}
 						cursor = db.query(
 								TABLE_NAME,
@@ -700,25 +701,25 @@ public class SimpleDynamoProvider extends ContentProvider {
 //
 //
 //					try {
-//						Log.d(TAG, "cursor 1");
+//						if (logging == true)Log.d(TAG, "cursor 1");
 //						port = successorMap.get(port);
 //						if (!port.equals(originatorPort)) {
 //							cursor1 = actSynchronously("search", port, originatorPort, selectionArgss[0]);
 //						}
 //					} catch (Exception e) {
-//						Log.d(TAG, "cursor1 is null maybe");
+//						if (logging == true)Log.d(TAG, "cursor1 is null maybe");
 //						Log.e(TAG, "query myPort.equals(portToStoreKey) first" +
 //								" succ: " + port + " key: "+selectionArgss[0] + " originatorPort:"+originatorPort +" err: "+ e.toString());
 //					}
 //
 //					try {
-//						Log.d(TAG, "cursor 2");
+//						if (logging == true)Log.d(TAG, "cursor 2");
 //						port = successorMap.get(port);
 //						if (!port.equals(originatorPort)) {
 //							cursor2 = actSynchronously("search", port, originatorPort, selectionArgss[0]);
 //						}
 //					} catch (Exception e) {
-//						Log.d(TAG, "cursor2 is null maybe");
+//						if (logging == true)Log.d(TAG, "cursor2 is null maybe");
 //						Log.e(TAG, "query myPort.equals(portToStoreKey) " +
 //								"second" +
 //								" succ: " + port + " key: "+selectionArgss[0] + " originatorPort:"+originatorPort +" err: "+ e.toString());
@@ -732,7 +733,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 //
 //					if (cursor != null && cursor.getCount() > 0) {
 //						dummyCursor = cursor;
-//						Log.d(TAG, "dumping time cursor: " + DatabaseUtils.dumpCursorToString(dummyCursor));
+//						if (logging == true)Log.d(TAG, "dumping time cursor: " + DatabaseUtils.dumpCursorToString(dummyCursor));
 //
 //						cursor.moveToFirst();
 //						time = cursor.getString(4);
@@ -747,7 +748,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 //
 //					try {
 //						if (cursor1 != null && cursor1.getCount() > 0) {
-//							Log.d(TAG, "cursor1 != null && cursor1.getCount() > 0");
+//							if (logging == true)Log.d(TAG, "cursor1 != null && cursor1.getCount() > 0");
 //							cursor1.moveToFirst();
 //							time1 = cursor1.getString(4);
 //						}
@@ -757,7 +758,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 //
 //					try {
 //						if (cursor2 != null && cursor2.getCount() > 0) {
-//							Log.d(TAG, "cursor2 != null && cursor2.getCount() > 0");
+//							if (logging == true)Log.d(TAG, "cursor2 != null && cursor2.getCount() > 0");
 //							cursor2.moveToFirst();
 //							time2 = cursor2.getString(4);
 //						}
@@ -767,25 +768,25 @@ public class SimpleDynamoProvider extends ContentProvider {
 //
 //					if (time != null) {
 //						if (time1 != null && time1.compareTo(time) > 0) {
-//							Log.d(TAG, "time1 != null && time1.compareTo(time) > 0");
+//							if (logging == true)Log.d(TAG, "time1 != null && time1.compareTo(time) > 0");
 //							cursor = cursor1;
 //							time = time1;
 //						}
 //
 //						if (time2 != null && time2.compareTo(time) > 0) {
-//							Log.d(TAG, "time2 != null && time2.compareTo(time) > 0");
+//							if (logging == true)Log.d(TAG, "time2 != null && time2.compareTo(time) > 0");
 //							cursor = cursor2;
 //							time = time2;
 //						}
 //					} else {
 //						if (time1 != null && time2 != null && time1.compareTo(time2) > 0) {
-//							Log.d(TAG, "time1 != null && time2 != null && time1.compareTo(time2) > 0");
+//							if (logging == true)Log.d(TAG, "time1 != null && time2 != null && time1.compareTo(time2) > 0");
 //							cursor = cursor1;
 //						} else if (time1 != null) {
-//							Log.d(TAG, "time1 != null");
+//							if (logging == true)Log.d(TAG, "time1 != null");
 //							cursor = cursor1;
 //						} else {
-//							Log.d(TAG, "time1 == null && time2 == null");
+//							if (logging == true)Log.d(TAG, "time1 == null && time2 == null");
 //							cursor = cursor2;
 //						}
 //					}
@@ -820,17 +821,17 @@ public class SimpleDynamoProvider extends ContentProvider {
 ////					}
 //
 //					dummyCursor = cursor;
-//					Log.d(TAG, "query cursor myPort.equals (portToStoreKey) ");
-//					Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
+//					if (logging == true)Log.d(TAG, "query cursor myPort.equals (portToStoreKey) ");
+//					if (logging == true)Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
 //					cursor.moveToFirst();
-//					Log.d(TAG,"cursor qKEY " + cursor.getString(0));
-//					Log.d(TAG,"cursor qVALUE "+ cursor.getString(1));
+//					if (logging == true)Log.d(TAG,"cursor qKEY " + cursor.getString(0));
+//					if (logging == true)Log.d(TAG,"cursor qVALUE "+ cursor.getString(1));
 //				} else {
 //					if (!myPort.equals(portToStoreKey) && !portToStoreKey.equals(originatorPort)) {
 //						// TODO
 //						//HERERERERERERERERRERERER CHECK IF KEY IS REPLICATED LOCALLY
 //						// OR JUST QUERY LOCAL, IF NOT FOUND THEN SEARCH THE RING
-//						Log.d(TAG, "QUERYING myPort Not equals(portToStoreKey) " + myPort + " " + portToStoreKey + " " + selection);
+//						if (logging == true)Log.d(TAG, "QUERYING myPort Not equals(portToStoreKey) " + myPort + " " + portToStoreKey + " " + selection);
 //						while (((cursor != null && cursor.getCount() <= 0) || cursor == null) && !originatorPort.equals(portToStoreKey)) {
 					// TODO
 					//HERERERERERERERERRERERER CHECK IF KEY IS REPLICATED LOCALLY
@@ -869,7 +870,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 
 
 
-					Log.d(TAG, "QUERYING myPort Not equals(portToStoreKey) " + myPort + " " + portToStoreKey + " " + selection);
+					if (logging == true)Log.d(TAG, "QUERYING myPort Not equals(portToStoreKey) " + myPort + " " + portToStoreKey + " " + selection);
 
 
 					String port = portToStoreKey;
@@ -882,38 +883,38 @@ public class SimpleDynamoProvider extends ContentProvider {
 
 
 					try {
-						Log.d(TAG, "cursor 2");
+						if (logging == true)Log.d(TAG, "cursor 2");
 						port = successorMap.get(port);
 						if (!port.equals(originatorPort) && !port.equals(myPort) && myPort.equals(originatorPort)) {
 							cursor2 = actSynchronously("search", port, originatorPort, selectionArgss[0], null);
 						}
 					} catch (Exception e) {
-						Log.d(TAG, "cursor2 is null maybe");
+						if (logging == true)Log.d(TAG, "cursor2 is null maybe");
 						Log.e(TAG, "query myPort.equals(portToStoreKey) " +
 								"second" +
 								" succ: " + port + " key: "+selectionArgss[0] + " originatorPort:"+originatorPort +" err: "+ e.toString());
 					}
 
 					try {
-						Log.d(TAG, "cursor 3");
+						if (logging == true)Log.d(TAG, "cursor 3");
 						port = successorMap.get(port);
 						if (!port.equals(originatorPort) && !port.equals(myPort) && myPort.equals(originatorPort)) {
 							cursor3 = actSynchronously("search", port, originatorPort, selectionArgss[0], null);
 						}
 					} catch (Exception e) {
-						Log.d(TAG, "cursor3 is null maybe");
+						if (logging == true)Log.d(TAG, "cursor3 is null maybe");
 						Log.e(TAG, "query myPort.equals(portToStoreKey) " +
 								"third" +
 								" succ: " + port + " key: "+selectionArgss[0] + " originatorPort:"+originatorPort +" err: "+ e.toString());
 					}
 
 				try {
-					Log.d(TAG, "cursor 1");
+					if (logging == true)Log.d(TAG, "cursor 1");
 					if (!portToStoreKey.equals(originatorPort) && !portToStoreKey.equals(myPort) && myPort.equals(originatorPort)) {
 						cursor1 = actSynchronously("search", portToStoreKey, originatorPort, selectionArgss[0], null);
 					}
 				} catch (Exception e) {
-					Log.d(TAG, "cursor1 is null maybe");
+					if (logging == true)Log.d(TAG, "cursor1 is null maybe");
 					Log.e(TAG, "query myPort.equals(portToStoreKey) first" +
 							" succ: " + port + " key: "+selectionArgss[0] + " originatorPort:"+originatorPort +" err: "+ e.toString());
 				}
@@ -927,7 +928,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 
 					if (cursor != null && cursor.getCount() > 0) {
 						dummyCursor = cursor;
-						Log.d(TAG, "dumping time cursor: " + DatabaseUtils.dumpCursorToString(dummyCursor));
+						if (logging == true)Log.d(TAG, "dumping time cursor: " + DatabaseUtils.dumpCursorToString(dummyCursor));
 
 						cursor.moveToFirst();
 						time = cursor.getString(4);
@@ -942,10 +943,10 @@ public class SimpleDynamoProvider extends ContentProvider {
 
 					try {
 						if (cursor1 != null && cursor1.getCount() > 0) {
-							Log.d(TAG, "cursor1 != null && cursor1.getCount() > 0");
+							if (logging == true)Log.d(TAG, "cursor1 != null && cursor1.getCount() > 0");
 							cursor1.moveToFirst();
 							time1 = cursor1.getString(4);
-							Log.d(TAG, "dumping cursor1: " + DatabaseUtils.dumpCursorToString(cursor1));
+							if (logging == true)Log.d(TAG, "dumping cursor1: " + DatabaseUtils.dumpCursorToString(cursor1));
 						}
 					} catch (Exception e) {
 						Log.e(TAG, "cursor1 is broken: "+e.toString());
@@ -953,10 +954,10 @@ public class SimpleDynamoProvider extends ContentProvider {
 
 					try {
 						if (cursor2 != null && cursor2.getCount() > 0) {
-							Log.d(TAG, "cursor2 != null && cursor2.getCount() > 0");
+							if (logging == true)Log.d(TAG, "cursor2 != null && cursor2.getCount() > 0");
 							cursor2.moveToFirst();
 							time2 = cursor2.getString(4);
-							Log.d(TAG, "dumping cursor2: " + DatabaseUtils.dumpCursorToString(cursor2));
+							if (logging == true)Log.d(TAG, "dumping cursor2: " + DatabaseUtils.dumpCursorToString(cursor2));
 						}
 					} catch (Exception e) {
 						Log.e(TAG, "cursor2 is broken: "+e.toString());
@@ -964,11 +965,11 @@ public class SimpleDynamoProvider extends ContentProvider {
 
 					try {
 						if (cursor3 != null && cursor3.getCount() > 0) {
-							Log.d(TAG, "cursor3 != null && cursor3.getCount()" +
+							if (logging == true)Log.d(TAG, "cursor3 != null && cursor3.getCount()" +
 									" > 0");
 							cursor3.moveToFirst();
 							time3 = cursor3.getString(4);
-							Log.d(TAG, "dumping cursor3: " + DatabaseUtils.dumpCursorToString(cursor3));
+							if (logging == true)Log.d(TAG, "dumping cursor3: " + DatabaseUtils.dumpCursorToString(cursor3));
 						}
 					} catch (Exception e) {
 						Log.e(TAG, "cursor3 is broken: "+e.toString());
@@ -976,53 +977,53 @@ public class SimpleDynamoProvider extends ContentProvider {
 
 
 					if (time != null) {
-						Log.d(TAG, "time != null");
+						if (logging == true)Log.d(TAG, "time != null");
 						if (time1 != null && time1.compareTo(time) > 0) {
-							Log.d(TAG, "time1 != null && time1.compareTo(time) > 0");
+							if (logging == true)Log.d(TAG, "time1 != null && time1.compareTo(time) > 0");
 							cursor = cursor1;
 							time = time1;
 						}
 
 						if (time2 != null && time2.compareTo(time) > 0) {
-							Log.d(TAG, "time2 != null && time2.compareTo(time) > 0");
+							if (logging == true)Log.d(TAG, "time2 != null && time2.compareTo(time) > 0");
 							cursor = cursor2;
 							time = time2;
 						}
 
 						if (time3 != null && time3.compareTo(time) > 0) {
-							Log.d(TAG, "time3 != null && time3.compareTo" +
+							if (logging == true)Log.d(TAG, "time3 != null && time3.compareTo" +
 									"(time) > 0");
 							cursor = cursor3;
 							time = time3;
 						}
 					} else {
-						Log.d(TAG, "time == null");
+						if (logging == true)Log.d(TAG, "time == null");
 						if (time1 != null) {
-							Log.d(TAG, "time1 != null");
+							if (logging == true)Log.d(TAG, "time1 != null");
 							cursor = cursor1;
 
 							if (time2 != null && time2.compareTo(time1) > 0) {
-								Log.d(TAG, "time2 != null && time2.compareTo(time1) > 0");
+								if (logging == true)Log.d(TAG, "time2 != null && time2.compareTo(time1) > 0");
 								cursor = cursor2;
 								time1 = time2;
 							}
 
 							if (time3 != null && time3.compareTo(time1) > 0) {
-								Log.d(TAG, "time3 != null && time3.compareTo(time1) > 0");
+								if (logging == true)Log.d(TAG, "time3 != null && time3.compareTo(time1) > 0");
 								cursor = cursor3;
 							}
 						} else {
 							if (time2 != null) {
-								Log.d(TAG, "time2 != null");
+								if (logging == true)Log.d(TAG, "time2 != null");
 								cursor = cursor2;
 
 								if (time3 != null && time3.compareTo(time2) > 0) {
-									Log.d(TAG, "time3 != null && time3.compareTo(time2) > 0");
+									if (logging == true)Log.d(TAG, "time3 != null && time3.compareTo(time2) > 0");
 									cursor = cursor3;
 								}
 							} else {
 								if (time3 != null) {
-									Log.d(TAG, "time3 != null");
+									if (logging == true)Log.d(TAG, "time3 != null");
 									cursor = cursor3;
 								}
 							}
@@ -1053,13 +1054,13 @@ public class SimpleDynamoProvider extends ContentProvider {
 //						while ((cursor != null && cursor.getCount() <= 0) || cursor == null) {
 ////					while (cursor == null || cursor.getCount() <= 0) {
 //							try {
-//								Log.d(TAG, "query cursor myPort Not equals (portToStoreKey) ");
+//								if (logging == true)Log.d(TAG, "query cursor myPort Not equals (portToStoreKey) ");
 //								if (!port.equals(originatorPort)) {
 //									cursor = actSynchronously("search", port, originatorPort, selectionArgss[0]);
 //								}
 //
 //								dummyCursor = cursor;
-//								Log.d(TAG,
+//								if (logging == true)Log.d(TAG,
 //										"dumpcursor 817: "+DatabaseUtils.dumpCursorToString(dummyCursor));
 //
 //
@@ -1109,7 +1110,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 
 //			=================================
 //			if (myPort.equals(portToStoreKey)) {
-////				Log.d(TAG, "QUERYING myPort.equals(portToStoreKey) " + myPort + " " + selection);
+////				if (logging == true)Log.d(TAG, "QUERYING myPort.equals(portToStoreKey) " + myPort + " " + selection);
 //
 //				selection = COLUMN_NAME_KEY + "=?";
 //
@@ -1134,15 +1135,15 @@ public class SimpleDynamoProvider extends ContentProvider {
 //						"1"
 //				);
 //
-////				Log.d(TAG, "qKEY " + selectionArgss[0]);
+////				if (logging == true)Log.d(TAG, "qKEY " + selectionArgss[0]);
 //				try {
 //					if (cursor.getCount() > 0) {
-//						Log.d(TAG, "query cursor myPort.equals" +
+//						if (logging == true)Log.d(TAG, "query cursor myPort.equals" +
 //								"(portToStoreKey) ");
-//						Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
+//						if (logging == true)Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
 ////						cursor.moveToFirst();
-////						Log.d(TAG,"cursor qKEY " + cursor.getString(0));
-////						Log.d(TAG,"cursor qVALUE "+ cursor.getString(1));
+////						if (logging == true)Log.d(TAG,"cursor qKEY " + cursor.getString(0));
+////						if (logging == true)Log.d(TAG,"cursor qVALUE "+ cursor.getString(1));
 //					}
 //				} catch (Exception e) {
 //					Log.e(TAG, e.toString());
@@ -1153,13 +1154,13 @@ public class SimpleDynamoProvider extends ContentProvider {
 //				// TODO
 //				//HERERERERERERERERRERERER CHECK IF KEY IS REPLICATED LOCALLY
 //				// OR JUST QUERY LOCAL, IF NOT FOUND THEN SEARCH THE RING
-//				Log.d(TAG, "QUERYING myPort Not equals(portToStoreKey) " + myPort + " " + portToStoreKey + " " + selection);
+//				if (logging == true)Log.d(TAG, "QUERYING myPort Not equals(portToStoreKey) " + myPort + " " + portToStoreKey + " " + selection);
 //				try {
 //					cursor = actSynchronously("search", portToStoreKey, originatorPort, selectionArgss[0]);
-//					Log.d(TAG, "query cursor myPort Not equals" +
+//					if (logging == true)Log.d(TAG, "query cursor myPort Not equals" +
 //							"(portToStoreKey) ");
 //					dummyCursor = cursor;
-//					Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
+//					if (logging == true)Log.d(TAG, DatabaseUtils.dumpCursorToString(dummyCursor));
 ////					cursor.moveToFirst();
 //				} catch (Exception e) {
 //					Log.e(TAG, "first call to actSynchronously: " + myPort);
@@ -1194,7 +1195,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 								   String time) {
 		if (msgType.equals("search")) {
 			try {
-				Log.d(TAG, "actSynchronously Start for msgType:" + msgType +
+				if (logging == true)Log.d(TAG, "actSynchronously Start for msgType:" + msgType +
 						" " + "portToConnect: " + portToConnect + " key: " + key + " originatorPort:" + originatorPort + " time: "+time);
 				Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}), Integer.parseInt(portToConnect));
 				socket.setSoTimeout(500);
@@ -1278,14 +1279,14 @@ public class SimpleDynamoProvider extends ContentProvider {
 			String _key = originatorPort;
 			String value = key;
 
-			Log.d(TAG,
+			if (logging == true)Log.d(TAG,
 					msgType + " ClienTask for key: " + _key + " myPort: " + myPort + " sent to: " + nxtSuccessor +
 							" ASYNC MSG 1");
 			try {
 				Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}), Integer.parseInt(nxtSuccessor));
 				socket.setSoTimeout(500);
 
-				Log.d(TAG, msgType + " ClienTask for key: " + _key + " " +
+				if (logging == true)Log.d(TAG, msgType + " ClienTask for key: " + _key + " " +
 						"myPort: " + myPort + " sent to: " + nxtSuccessor +
 						" ASYNC MSG 2");
 				messageStruct msgStruct;
@@ -1316,7 +1317,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 				in.close();
 
 				socket.close();
-//					Log.d(TAG, msgType + " ClienTask for key: " + _key + " "
+//					if (logging == true)Log.d(TAG, msgType + " ClienTask for key: " + _key + " "
 //					+ "myPort: " + myPort + " sent to: " + nxtSuccessor + " DUPLICATE MSG SENT");
 			} catch (EOFException e) {
 				Log.e(TAG, "ClientTask " + msgType + " " + nxtSuccessor + " " +
@@ -1411,12 +1412,12 @@ public class SimpleDynamoProvider extends ContentProvider {
 				String key = msgs[2];
 				String value = msgs[3];
 
-				Log.d(TAG, msgType + " ClienTask for key: " + key + " myPort: " + myPort + " sent to: " + nxtSuccessor);
+				if (logging == true)Log.d(TAG, msgType + " ClienTask for key: " + key + " myPort: " + myPort + " sent to: " + nxtSuccessor);
 				try {
 					Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}), Integer.parseInt(nxtSuccessor));
 					socket.setSoTimeout(500);
 
-					Log.d(TAG, msgType + " ClienTask for key: " + key + " " + "myPort: " + myPort + " sent to: " + nxtSuccessor + " DUPLICATE MSG");
+					if (logging == true)Log.d(TAG, msgType + " ClienTask for key: " + key + " " + "myPort: " + myPort + " sent to: " + nxtSuccessor + " DUPLICATE MSG");
 					messageStruct msgStruct;
 					// TIME CAN CREATE PROBLEM HERE MAYBE
 					if (msgType.equals("replication")) {
@@ -1446,7 +1447,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 					in.close();
 
 					socket.close();
-//					Log.d(TAG, msgType + " ClienTask for key: " + key + " " + "myPort: " + myPort + " sent to: " + nxtSuccessor + " DUPLICATE MSG SENT");
+//					if (logging == true)Log.d(TAG, msgType + " ClienTask for key: " + key + " " + "myPort: " + myPort + " sent to: " + nxtSuccessor + " DUPLICATE MSG SENT");
 				} catch (EOFException e) {
 					Log.e(TAG,
 							"ClientTask ASYNC " + msgType + " " + nxtSuccessor + " SocketTimeoutException " + key + " : " + e.toString());
@@ -1458,7 +1459,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 //						for (int i=0; i<2; i++) {
 //							port = successorMap.get(port);
 //
-//							Log.d(TAG, "insert failed for Async client: " + nxtSuccessor + " key: " + key + " value: "+value);
+//							if (logging == true)Log.d(TAG, "insert failed for Async client: " + nxtSuccessor + " key: " + key + " value: "+value);
 //							forClientPublishProgress = new String[]{
 //								"replication",
 //								port,
@@ -1517,7 +1518,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 			} else if (msgType.equals("replicate") || msgType.equals("getMissedInsert")) {
 				String originatorPort = msgs[2];
 
-//				Log.d(TAG, "Insert ClienTask for key: " + key + " myPort: " + myPort + " sent to: " + nxtSuccessor);
+//				if (logging == true)Log.d(TAG, "Insert ClienTask for key: " + key + " myPort: " + myPort + " sent to: " + nxtSuccessor);
 				try {
 					Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}), Integer.parseInt(nxtSuccessor));
 
@@ -1539,7 +1540,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 
 					if (cursorKeyValueMap != null && !cursorKeyValueMap.isEmpty()) {
 						for (Map.Entry<String, String> entry : cursorKeyValueMap.entrySet()) {
-							Log.d(TAG,
+							if (logging == true)Log.d(TAG,
 									"looping "+msgType+" for failed nodes " + entry.getKey() + " myPort: " + myPort + " from node: " + nxtSuccessor);
 //							ContentValues values = new ContentValues();
 
@@ -1561,7 +1562,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 							v = entry.getValue();
 
 							String[] value_time = v.split("-");
-							Log.d(TAG,
+							if (logging == true)Log.d(TAG,
 									msgType+" printing | k: "+k+" v: "+value_time[0] + " t: "+value_time[1] + " oV:"+v);
 
 							insertReplication(CONTENT_URI, k,
@@ -1609,7 +1610,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 			messageStruct msgPlusPortObject = new messageStruct();
 
 			while(true){
-//				Log.d(TAG, "GLOBAL myPort: " + myPort + "," + " succ: "+ successor + ", pred: "+predecessor);
+//				if (logging == true)Log.d(TAG, "GLOBAL myPort: " + myPort + "," + " succ: "+ successor + ", pred: "+predecessor);
 				try {
 					Socket clientSocket = null;
 					clientSocket = serverSocket.accept();
@@ -1626,7 +1627,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 //						values.put(SimpleDynamoProvider.COLUMN_NAME_VALUE, msgPlusPortObject.value);
 
 						if (msgPlusPortObject.msg.equals("replication")) {
-							Log.d(TAG, "insertReplication ServerTask for key:" + " " + msgPlusPortObject.key + " myPort: " + myPort);
+							if (logging == true)Log.d(TAG, "insertReplication ServerTask for key:" + " " + msgPlusPortObject.key + " myPort: " + myPort);
 
 							String values_type = "replication";
 							String values_port = msgPlusPortObject.originatorPort;
@@ -1636,7 +1637,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 									values_port, msgPlusPortObject.msg,
 									msgPlusPortObject.time);
 						} else {
-							Log.d(TAG, "Insert ServerTask for key: " + msgPlusPortObject.key + " myPort: " + myPort);
+							if (logging == true)Log.d(TAG, "Insert ServerTask for key: " + msgPlusPortObject.key + " myPort: " + myPort);
 							ContentValues values = new ContentValues();
 
 							values.put(SimpleDynamoProvider.COLUMN_NAME_KEY, msgPlusPortObject.key);
@@ -1644,7 +1645,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 							values.put("type", "insertion");
 							values.put("port", myPort);
 							insert(CONTENT_URI, values);
-//							Log.d(TAG, "Insert DONE ServerTask for key: " + msgPlusPortObject.key + " myPort: " + myPort);
+//							if (logging == true)Log.d(TAG, "Insert DONE ServerTask for key: " + msgPlusPortObject.key + " myPort: " + myPort);
 						}
 						ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());
 						out.writeObject(msgPlusPortObject);
@@ -1666,7 +1667,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 //								if (hashKey.compareTo(myPortHash) <= 0 && hashKey.compareTo(successorHash) < 0) {
 //									cursor = query(CONTENT_URI, null, msgPlusPortObject.key, new String[]{msgPlusPortObject.originatorPort}, null);
 //								} else if (hashKey.compareTo(myPortHash) > 0 && hashKey.compareTo(successorHash) < 0) {
-//									Log.d(TAG, "hashKey.compareTo(myPortHash) > 0 && hashKey.compareTo(successorHash) < 0");
+//									if (logging == true)Log.d(TAG, "hashKey.compareTo(myPortHash) > 0 && hashKey.compareTo(successorHash) < 0");
 //									cursor = actSynchronously("search", successor, msgPlusPortObject.originatorPort, msgPlusPortObject.key);
 //								} else if (hashKey.compareTo(myPortHash) > 0 && hashKey.compareTo(successorHash) > 0) {
 //									cursor = query(CONTENT_URI, null, msgPlusPortObject.key, new String[]{msgPlusPortObject.originatorPort}, null);
@@ -1678,7 +1679,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 //							} else if (myPortHash.compareTo(hashKey) > 0 && predecessorHash.compareTo(hashKey) > 0 && successorHash.compareTo(hashKey) > 0 && myPortHash.compareTo(predecessorHash) < 0) {
 //								cursor = query(CONTENT_URI, null, msgPlusPortObject.key, new String[]{msgPlusPortObject.originatorPort}, null);
 //							} else {
-								Log.d(TAG, "else in server search");
+								if (logging == true)Log.d(TAG, "else in server search");
 								cursor = query(CONTENT_URI, null, msgPlusPortObject.key, new String[]{msgPlusPortObject.originatorPort}, null);
 //								cursor = actSynchronously("search", successor, msgPlusPortObject.originatorPort, msgPlusPortObject.key);
 //							}
@@ -1709,7 +1710,7 @@ public class SimpleDynamoProvider extends ContentProvider {
 						out.flush();
 						out.close();
 					} else if (msgPlusPortObject.msg.equals("replicate") || msgPlusPortObject.msg.equals("getMissedInsert")) {
-//						Log.d(TAG, "replicate 1");
+//						if (logging == true)Log.d(TAG, "replicate 1");
 						Cursor cursor = null;
 						if (msgPlusPortObject.msg.equals("replicate")) {
 							cursor = query(CONTENT_URI, null, "insertion", new String[]{msgPlusPortObject.originatorPort}, null);
@@ -1717,9 +1718,9 @@ public class SimpleDynamoProvider extends ContentProvider {
 							cursor = query(CONTENT_URI, null, "replication",new String[]{msgPlusPortObject.originatorPort}, null);
 						}
 
-//						Log.d(TAG, "replicate 2");
+//						if (logging == true)Log.d(TAG, "replicate 2");
 						if (cursor.getCount() > 0) {
-//							Log.d(TAG, "replicate 3");
+//							if (logging == true)Log.d(TAG, "replicate 3");
 							cursor.moveToFirst();
 
 
@@ -1728,22 +1729,22 @@ public class SimpleDynamoProvider extends ContentProvider {
 							while(!cursor.isAfterLast()) {
 								k = cursor.getString(0);
 								v = cursor.getString(1)+"-"+cursor.getString(4);
-								Log.d(TAG, msgPlusPortObject.msg + " printing | " + "k: "+k+" v: "+v);
+								if (logging == true)Log.d(TAG, msgPlusPortObject.msg + " printing | " + "k: "+k+" v: "+v);
 								cursorKeyValueMap.put(k, v);
 								cursor.moveToNext();
 							}
 							msgPlusPortObject.keyValueMap = cursorKeyValueMap;
 						}
 
-//						Log.d(TAG, "replicate 4");
+//						if (logging == true)Log.d(TAG, "replicate 4");
 						ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());
 						out.writeObject(msgPlusPortObject);
 						out.flush();
 						out.close();
 					} else if (msgPlusPortObject.msg.equals("delete")) {
-						Log.d(TAG, "ServerTask delete for key: " + msgPlusPortObject.key + " myPort: "+myPort);
+						if (logging == true)Log.d(TAG, "ServerTask delete for key: " + msgPlusPortObject.key + " myPort: "+myPort);
 						delete(CONTENT_URI, msgPlusPortObject.key, null);
-						Log.d(TAG,
+						if (logging == true)Log.d(TAG,
 								"ServerTask delete DONE for key: " + msgPlusPortObject.key + " myPort: "+myPort);
 					}
 
